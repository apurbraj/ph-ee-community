version: 2.1
orbs:
  slack: circleci/slack@4.12.5
  helm: circleci/helm@2.0.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  fynarfin-orb: fynarfin/docker-image-availability-check-and-upgrade@1.0.2

executors:
  docker-executor:
    docker:
      - image: circleci/openjdk:17-buster-node-browsers-legacy
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

jobs:
  build-g2p-sandbox-ci-chart:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: rm -f ph-ee-env-labs/helm/ph-ee-g2p-sandbox-ci/Chart.lock ph-ee-env-labs/helm/ph-ee-g2p-sandbox-ci/requirements.lock ph-ee-env-labs/helm/ph-ee-g2p-sandbox-ci/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      # - run: "sed -i '12s/.*/version: 0.0.0/' helm/ph-ee-g2p-sandbox-ci/Chart.yaml"
      - run:
          name: build-and-host-ph-ee-g2p-sandbox-ci
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            cd ph-ee-env-labs
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
                echo Charts will save in https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR
            fi
            CHART_URL="https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-0.0.0$JIRA_STORY"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              sed -i "11s@^ *repository:.*\$@  repository: $CHART_URL@" ph-ee-env-labs/helm/ph-ee-g2p-sandbox-ci/Chart.yaml
              sed -i "12s@^ *version:.*\$@  version: 0.0.0$JIRA_STORY@" ph-ee-env-labs/helm/ph-ee-g2p-sandbox-ci/Chart.yaml
              echo "chart used: < $CHART_URL >"
            else
              CHART_URL="https://fynarfin.io/images/fynarfin/ph-ee-g2p-sandbox-ci-0.0.0"
              echo "chart used: < $CHART_URL >"
            fi
            sed -i "6s/.*/version: 0.0.0$JIRA_STORY/" ph-ee-env-labs/helm/ph-ee-g2p-sandbox-ci/Chart.yaml
            cat ph-ee-env-labs/helm/ph-ee-g2p-sandbox-ci/Chart.yaml
            helm dep up ph-ee-env-labs/helm/ph-ee-g2p-sandbox-ci
            helm package ph-ee-env-labs/helm/ph-ee-g2p-sandbox-ci
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2p-sandbox-ci$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2p-sandbox-ci-0.0.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2p-sandbox-ci$JIRA_STORY index.yaml ph-ee-g2p-sandbox-ci-0.0.0$JIRA_STORY.tgz
  build-and-host-engine:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: git clone https://github.com/fynarfin/ph-ee-core
      - run: rm -f ph-ee-env-template/helm/ph-ee-engine/Chart.lock ph-ee-env-template/helm/ph-ee-engine/requirements.lock ph-ee-env-template/helm/ph-ee-engine/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: build-and-host-engine
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            cd ph-ee-env-template
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
              echo Charts will save in https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR
            fi
            sed -i "5s/.*/version: 0.0.0-SNAPSHOT$JIRA_STORY/" helm/ph-ee-engine/Chart.yaml
            helm dep up helm/ph-ee-engine
            helm package helm/ph-ee-engine
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-engine-0.0.0-SNAPSHOT$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-engine-0.0.0-SNAPSHOT$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo cp -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-engine-0.0.0-SNAPSHOT$JIRA_STORY index.yaml ph-ee-engine-0.0.0-SNAPSHOT$JIRA_STORY.tgz
  build-and-host-g2p-sandbox:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: git clone https://github.com/fynarfin/ph-ee-core
      - run: rm -f ph-ee-env-template/helm/g2p-sandbox/Chart.lock ph-ee-env-template/helm/g2p-sandbox/requirements.lock ph-ee-env-template/helm/g2p-sandbox/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: build-and-host-g2p-sandbox
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            cd ph-ee-env-template
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
            fi
            CHART_URL="https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR/ph-ee-engine-0.0.0-SNAPSHOT$JIRA_STORY"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              sed -i "10s@^ *repository:.*\$@  repository: $CHART_URL@" helm/g2p-sandbox/Chart.yaml
              sed -i "11s@^ *version:.*\$@  version: 0.0.0-SNAPSHOT$JIRA_STORY@" helm/g2p-sandbox/Chart.yaml
              echo "chart used: < $CHART_URL >"
            else
              CHART_URL="https://fynarfin.io/images/fynarfin/ph-ee-engine-0.0.0-SNAPSHOT"
              echo "chart used: < $CHART_URL >"
            fi
            sed -i "5s/.*/version: 0.0.0$JIRA_STORY/" helm/g2p-sandbox/Chart.yaml
            # rm -rf helm/g2p-sandbox/templates/config.yml
            cat helm/g2p-sandbox/Chart.yaml
            helm dep up helm/g2p-sandbox
            helm package helm/g2p-sandbox
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-0.0.0$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2psandbox-0.0.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-0.0.0$JIRA_STORY index.yaml ph-ee-g2psandbox-0.0.0$JIRA_STORY.tgz
  build-host-g2p-fyn-chart:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: rm -f ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/Chart.lock ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/requirements.lock ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      # - run: "sed -i '12s/.*/version: 0.0.0/' helm/g2p-sandbox-fynarfin-SIT/Chart.yaml"
      - run:
          name: build-host-g2p-fyn-chart
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            cd ph-ee-env-labs
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
            fi
            CHART_URL="https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-0.0.0$JIRA_STORY"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              sed -i "11s@^ *repository:.*\$@  repository: $CHART_URL@" ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/Chart.yaml
              sed -i "12s@^ *version:.*\$@  version: 0.0.0$JIRA_STORY@" ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/Chart.yaml
              echo "chart used: < $CHART_URL >"
            else
              CHART_URL="https://fynarfin.io/images/fynarfin/ph-ee-g2psandbox-0.0.0"
              echo "chart used: < $CHART_URL >"
            fi
            sed -i "6s/.*/version: 0.2.0$JIRA_STORY/" ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/Chart.yaml
            cat ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT/Chart.yaml
            helm dep up ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT
            helm package ph-ee-env-labs/helm/g2p-sandbox-fynarfin-SIT
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-fynarfin$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2psandbox-fynarfin-0.2.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-fynarfin$JIRA_STORY index.yaml ph-ee-g2psandbox-fynarfin-0.2.0$JIRA_STORY.tgz
  build-and-host-g2p-sandbox-security:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    environment:
      TERM: dumb
    steps:
      - checkout
      - run: rm -f helm/g2p-sandbox-security/Chart.lock helm/g2p-sandbox-security/requirements.lock helm/g2p-sandbox-security/charts/*
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: build-and-host-g2p-sandbox-security
          environment:
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
          command: |
            cd ph-ee-env-template
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=-$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
            fi
            CHART_URL="https://fynarfin.io/images/fynarfin$JIRA_STORY_DIR/ph-ee-engine-0.0.0-SNAPSHOT$JIRA_STORY"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              sed -i "10s@^ *repository:.*\$@  repository: $CHART_URL@" helm/g2p-sandbox-security/Chart.yaml
              sed -i "11s@^ *version:.*\$@  version: 0.0.0-SNAPSHOT$JIRA_STORY@" helm/g2p-sandbox-security/Chart.yaml
              echo "chart used: < $CHART_URL >"
            else
              CHART_URL="https://fynarfin.io/images/fynarfin/ph-ee-engine-0.0.0-SNAPSHOT"
              echo "chart used: < $CHART_URL >"
            fi
            sed -i "5s/.*/version: 0.0.0$JIRA_STORY/" helm/g2p-sandbox-security/Chart.yaml
            cat helm/g2p-sandbox-security/Chart.yaml
            # - run: "sed -i '4s/.*/version: 0.0.0-SNAPSHOT/' helm/g2p-sandbox-security/requirements.yaml"
            # SED & replace dependency with 0.0.0
            helm dep up helm/g2p-sandbox-security
            helm package helm/g2p-sandbox-security
            helm repo index .
            echo "$CERT_FILE" | base64 --decode > b64encoded.pem
            chmod 400 b64encoded.pem
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mkdir -p /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-security$JIRA_STORY
            scp -o StrictHostKeyChecking=No -i b64encoded.pem index.yaml ph-ee-g2psandbox-security-0.0.0$JIRA_STORY.tgz ec2-user@13.233.68.128:~/
            ssh -i b64encoded.pem -o StrictHostKeyChecking=No ec2-user@13.233.68.128 sudo mv -t /apps/apache-tomcat-7.0.82/webapps/ROOT/images/fynarfin$JIRA_STORY_DIR/ph-ee-g2psandbox-security$JIRA_STORY index.yaml ph-ee-g2psandbox-security-0.0.0$JIRA_STORY.tgz
  minikube-run-helm-upgrade-and-helm-test:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    resource_class: large
    environment:
      TERM: dumb
    parameters:
      namespace:
        default: "paymenthub"
        description: |
          The kubernetes namespace that should be used.
        type: string
      release-name:
        default: "g2p-sandbox"
        description: |
          Specify a name for the release.
        type: string
      cluster-name:
        default: "minikube"
        type: string
      service-file-path:
        default: https://raw.githubusercontent.com/fynarfin/ph-ee-community/ph-ee-env-labs/develop/.circleci/services.txt
        type: string
      chart-base-url:
        default: https://fynarfin.io/images/fynarfin
        type: string
      chart-name:
        default: ph-ee-g2p-sandbox-ci
        type: string
      chart-version:
        default: 0.0.0
        type: string
    steps:
      - helm/install-helm-client:
          version: "v3.8.2"
      - run:
          name: run minikube
          no_output_timeout: 40m
          command : |
            free -m
            #!/bin/bash
            #insatll kubectl--------
            echo hello 
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gpg
            sudo mkdir -p /etc/apt/keyrings
            sudo touch -y /etc/apt/keyrings/kubernetes-apt-keyring.gpg || echo done
            curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
            echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubelet kubeadm kubectl
            sudo apt-mark hold kubelet kubeadm kubectl

            #Setup Minikube
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
            sudo dpkg -i minikube_latest_amd64.deb
            echo minikube waiting
            minikube config set cpus 4
            minikube config set memory 15721
            minikube start #--extra-config=kubelet.max-pods=60 --cpus max --memory max --disk-size 50g
            echo "Minikube started-----------------------------------------------------"
            minikube addons enable metrics-server
            # To check the allocated values 
            #minikube config get cpus
            #minikube config get memory

            MINIKUBE_IP=`minikube ip`
            echo $MINIKUBE_IP
            # cat ~/.kube/config
            
            minikube kubectl -- get po -A #Interact with Minikube cluster
            kubectl create namespace paymenthub
            kubectl get -A namespace  

            # # For remote access to minikube uncomment the following lines.
            # #---------------------minikube remote aceess start---------------------
            # sudo apt install nginx        
            # sudo touch /etc/nginx/conf.d/minikube.conf 
            # echo "create nginx conf"
            # sudo chmod 777 -R /etc/nginx/conf.d/
            # echo "changed access"

            # sudo apt-get install apache2-utils -y
            # echo "apache2-utils installed"
            # htpasswd -bc /home/circleci/project/.htpasswd minikube minikube

            # sudo cat \<<EOF > /etc/nginx/conf.d/minikube.conf 
            # server {
            #    listen       8080;
            #    listen [::]:8080;
            #    server_name  localhost;
            #    access_log /home/circleci/project/nginx_access.log;
            #   auth_basic "Administrators Area";
            #   auth_basic_user_file /home/circleci/project/.htpasswd;    

            #    location / {   
            #        proxy_pass https://$MINIKUBE_IP:8443;
            #        proxy_ssl_certificate /home/circleci/.minikube/profiles/minikube/client.crt;
            #        proxy_ssl_certificate_key /home/circleci/.minikube/profiles/minikube/client.key;
            #    }
            # }
            # EOF
            # sudo service nginx restart || echo 'start nginx'
            # SYSTEMD_LESS=FRXMK  systemctl status nginx.service

            # sleep 10
            
            # echo "test-nginx-proxy"
            # curl -u minikube:minikube http://localhost:8080

            # curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok
            # ngrok config add-authtoken $AUTH_TOKEN
            # echo "web_addr: $LOCAL_PORT" >> /home/circleci/.config/ngrok/ngrok.yml
            # ngrok http 8080 > /dev/null &

            # echo -n "Extracting ngrok public url ."
            # NGROK_PUBLIC_URL=""
            # while [ -z "$NGROK_PUBLIC_URL" ]; do
            #   # Run 'curl' against ngrok API and extract public (using 'sed' command)
            #   export NGROK_PUBLIC_URL=$(curl --silent --max-time 10 --connect-timeout 5 \
            #                             --show-error http://127.0.0.1:$LOCAL_PORT/api/tunnels | \
            #                             sed -nE 's/.*public_url":"https:..([^"]*).*/\1/p')
            #   sleep 1
            #   echo -n "."
            # done
            # echo ---------copy the below public_URL for NGrok----------
            # echo "https://$NGROK_PUBLIC_URL"
            # echo "https://$NGROK_PUBLIC_URL"

            # echo "test ngrok "
            # curl -u minikube:minikube https://$NGROK_PUBLIC_URL
            # echo "https://$NGROK_PUBLIC_URL"
            # # ---------------------minikube remote access end---------------------

            curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
            sudo apt-get install apt-transport-https --yes
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
            #helm install
            sudo apt-get update
            sudo apt-get install helm
            kubectl create namespace paymenthub || echo namespace already exists
            minikube ssh -- free -m
            echo ------------MEMORY CHECK -----------

      - run:
          no_output_timeout: 20m
          name: fetch docker images and helm upgrade
          environment:
            ORB_CHART_BASE_URL: << parameters.chart-base-url >>
            ORB_CHART_NAME: << parameters.chart-name >>
            ORB_CHART_VERSION: << parameters.chart-version >>
            ORB_PARAM_NAMESPACE: << parameters.namespace >>
            ORB_PARAM_RELEASE_NAME: << parameters.release-name >>
            JIRA_STORY: ''
            JIRA_STORY_DIR: ''
            VALUES_TO_OVERRIDE: ''
            SERVICE_FILE_PATH: << parameters.service-file-path>>
          command: |
            function get_services_from_file() {
                file=$1
                while IFS= read -r line || [ -n "$line" ]; do
                  generate_values_to_override $line
                done < "$file"
            }
            
            function generate_values_to_override() {
              PREFIX="docker.io/"
              if [ "$CIRCLE_BRANCH" != "develop" ] && check_for_image_tag ${2#"$PREFIX"} ${JIRA_STORY}; then
                  echo "image: < $1=$2:$JIRA_STORY >"
                  VALUES_TO_OVERRIDE+=$(echo "$1=$2:$JIRA_STORY"),
              else
                  echo "image: < $1=$2:latest >"
                  VALUES_TO_OVERRIDE+=$(echo "$1=$2:latest"),
              fi
            }
            function check_for_image_tag(){
              curl --silent -f --head -lL https://hub.docker.com/v2/repositories/$1/tags/$2/ > /dev/null
            }
            if [ "$CIRCLE_BRANCH" != "develop" ]; then
            
              PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
              PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
              JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
              if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY" && JIRA_STORY_DIR=$(echo /jira-story-version); fi
            fi 
            
            echo $SERVICE_FILE_PATH
            wget $SERVICE_FILE_PATH 
            filename=$(basename "$SERVICE_FILE_PATH")
            #Using sed replace ph-ee-g2psandbox. with empty string
            sed -i 's/ph-ee-g2p-sandbox-ci\.p/p/g' $filename 
            echo $filename
            get_services_from_file $filename
            
            if [ -n "${VALUES_TO_OVERRIDE}" ]; then
                VALUES_TO_OVERRIDE=$(echo --set ${VALUES_TO_OVERRIDE::-1})
                echo "VALUES_TO_OVERRIDE: $VALUES_TO_OVERRIDE"
            fi

            if [ -n "${ORB_PARAM_NAMESPACE}" ]; then
                ORB_PARAM_NAMESPACE=$(echo --namespace ${ORB_PARAM_NAMESPACE})
            fi
            if [ -n "${JIRA_STORY}" ]; then
              JIRA_STORY=-$(echo $JIRA_STORY)
            fi
            
            # Generating the chart url for deployment
            # chart: "https://fynarfin.io/images/ph-ee-g2p-sandbox-ci/ph-ee-g2p-sandbox-ci-0.0.0.tgz"
            ORB_PARAM_CHART=$(echo "$ORB_CHART_BASE_URL$JIRA_STORY_DIR/$ORB_CHART_NAME$JIRA_STORY/$ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY.tgz")
            
            CHART_URL="$ORB_PARAM_CHART"
            if curl --output /dev/null --silent --head --fail "$CHART_URL"; then
              echo "chart used: < $CHART_URL >"
              # add-repo: "https://fynarfin.io/images/ph-ee-g2p-sandbox-ci"
              ORB_PARAM_REPO=$(echo "$ORB_CHART_BASE_URL$JIRA_STORY_DIR/$ORB_CHART_NAME$JIRA_STORY")
            else
              CHART_URL="https://fynarfin.io/images/ph-ee-g2p-sandbox-ci/ph-ee-g2p-sandbox-ci-0.0.0.tgz"
              ORB_PARAM_REPO=$(echo "$ORB_CHART_BASE_URL/$ORB_CHART_NAME")
              echo "chart used: < $CHART_URL >"
            fi
            
            echo helm repo add "${ORB_PARAM_RELEASE_NAME}" "${ORB_PARAM_REPO}"
            helm repo add "${ORB_PARAM_RELEASE_NAME}" "${ORB_PARAM_REPO}"

            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml #Install ServiceMonitor
            helm repo update
            echo "helm upgrade --install ${VALUES_TO_OVERRIDE} ${ORB_PARAM_RELEASE_NAME} ${ORB_PARAM_CHART} ${ORB_PARAM_NAMESPACE}"
            echo helm chart install starts
            
            # Download ph-ee-g2p-sandbox-ci-chart and extract
            curl -O $ORB_CHART_BASE_URL$JIRA_STORY_DIR/$ORB_CHART_NAME$JIRA_STORY/$ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY.tgz && tar xvf $ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY.tgz
            rm -rf $ORB_CHART_NAME-$ORB_CHART_VERSION$JIRA_STORY.tgz
            
            ORB_PARAM_REPO=$(echo "$ORB_CHART_BASE_URL/$ORB_CHART_NAME")
            
            EXTRA_VALUES=$(echo "-f ph-ee-g2p-sandbox-ci/values_p1.yaml")
            helm upgrade ${EXTRA_VALUES} --install  --timeout=1h ${VALUES_TO_OVERRIDE} ${ORB_PARAM_RELEASE_NAME} ${ORB_PARAM_CHART} ${ORB_PARAM_NAMESPACE} 
            echo --------------------helm upgrade in Phase 1 done---------------------
            EXTRA_VALUES=$(echo "-f ph-ee-g2p-sandbox-ci/values_p2.yaml")
            helm upgrade ${EXTRA_VALUES} --install  --timeout=1h ${VALUES_TO_OVERRIDE} ${ORB_PARAM_RELEASE_NAME} ${ORB_PARAM_CHART} ${ORB_PARAM_NAMESPACE}
            echo --------------------helm upgrade in Phase 2 done---------------------
            echo --------------------helm upgrade is done---------------------
            sleep 1m;
            
            # ----------------------Post-Installation-Steps-starts---------------------------
            # #ES and Kibana secret creation
            # git clone -b 7.17 https://github.com/elastic/helm-charts.git elastic/helm-charts
            # cd elastic/helm-charts/elasticsearch/examples/security/
            # make secrets || echo "elastic-secrets" already exists
            # git clone -b 7.17 https://github.com/elastic/helm-charts.git elastic/helm-charts
            # cd elastic/helm-charts/kibana/examples/security/
            # make secrets || echo "kibana-secrets" already exists
            # kubectl get secret elastic-certificate-crt -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secret elastic-certificate-pem -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secret elastic-certificates -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secret elastic-credentials -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secret kibana -n default -o yaml | sed 's/namespace: default/namespace: paymenthub/' | kubectl create -f -
            # kubectl get secrets -n paymenthub
            # echo ---------secrets created--------
            
            # #insatll netcat
            # sudo apt install -y netcat
            # check_count=0
            # until ((check_count==20)) || nc -vz ph-ee-zeebe-ops 80; do 
            #     echo "Waiting for zeebe-ops service"; 
            #     sleep 5; 
            #     check_count=$(($check_count + 1));
            # done;
            # echo ------zeebe-ops service available-----------
            # # until nc -vz ph-ee-zeebe-ops 80; do echo "Waiting for zeebe-ops service"; sleep 2; done;
            
            # #Deploy BPMN 
            # kubectl port-forward service/ph-ee-zeebe-ops 5000:80 -n paymenthub & #portforward zeebe-ops &'
            # git clone https://github.com/fynarfin/ph-ee-env-labs.git fynarfin/ph-ee-env-labs
            # cd fynarfin/ph-ee-env-labs/orchestration
            # ls
            # sed -i "/HOST=/c\HOST=http://localhost:5000/zeebe/upload" deployBpmn.sh
            # cat deployBpmn.sh
            # cd ..
            # sh orchestration/deployBpmn.sh || echo 'deploy Bpmn done'
            #------------------Post-Installation-Steps-ends-------------------------------

      - run:
          name: Run Helm Tests
          command: |
            helm test g2p-sandbox --filter name=g2p-sandbox-test-gov --namespace paymenthub || echo test
            helm test g2p-sandbox --filter name=g2p-sandbox-test-ams --namespace paymenthub || echo test

      - run:
          name: Fetch Integration Test Report
          command: |
            #!/bin/bash
            mkdir -p integration_report/test-report

            echo "Fetch Integration Test Report for ams"
            kubectl cp paymenthub/`kubectl get pods -n paymenthub | grep g2p-sandbox-test-ams |cut -d " " -f1`:/ph-ee-connector-integration-test/build integration_report/test-report
            # Specify the path to the downloaded file
            downloaded_file="integration_report/test-report/cucumber.xml"
            # Loop until the file is not empty
            while [ ! -s $downloaded_file ]; do
                echo "File is empty, waiting..."
                sleep 60  # You can adjust the sleep interval as needed
                kubectl cp paymenthub/`kubectl get pods -n paymenthub | grep g2p-sandbox-test-ams |cut -d " " -f1`:/ph-ee-connector-integration-test/build/ integration_report/test-report
                downloaded_file="integration_report/test-report/cucumber.xml"
            done
            echo "File is no longer empty, processing..."
            mv integration_report/test-report/cucumber.xml integration_report/test-report/cucumber_ams.xml
            mv integration_report/test-report/reports/tests/test integration_report/test-report/reports/tests/test_ams
            # kubectl cp paymenthubb/`kubectl get pods -n paymenthub | grep g2p-sandbox-test-ams |cut -d " " -f1`:/ph-ee-connector-integration-test/build integration_report/test-report

            for i in $(kubectl get pods -n paymenthub | grep g2p-sandbox-test-ams |cut -d " " -f1); do
                echo "--------------------------------------------------------------------Logs of $i Start---------------------------------------------------------------------------" >> all_pod_logs.log
                kubectl logs -n paymenthub  $i  --all-containers=true >> all_pod_logs.log
                echo "---------------------------------------------------------------------Logs of $i End----------------------------------------------------------------------------" >> all_pod_logs.log
                echo " " >> all_pod_logs.log
                echo " " >> all_pod_logs.log
            done
            
            echo "Fetch Integration Test Report for GOV"
            kubectl cp paymenthub/`kubectl get pods -n paymenthub | grep g2p-sandbox-test-gov |cut -d " " -f1`:/ph-ee-connector-integration-test/build integration_report/test-report
            # Specify the path to the downloaded file 
            downloaded_file="integration_report/test-report/cucumber.xml"
            # Loop until the file is not empty
            while [ ! -s $downloaded_file ]; do
                echo "File is empty, waiting..."
                sleep 60  # You can adjust the sleep interval as needed
                kubectl cp paymenthub/`kubectl get pods -n paymenthub | grep g2p-sandbox-test-gov |cut -d " " -f1`:/ph-ee-connector-integration-test/build/ integration_report/test-report
                downloaded_file="integration_report/test-report/cucumber.xml"
            done
            echo "File is no longer empty, processing..."
            mv integration_report/test-report/cucumber.xml integration_report/test-report/cucumber_gov.xml
            mv integration_report/test-report/reports/tests/test integration_report/test-report/reports/tests/test_gov
            
            mkdir -p integration_report_final
            cp integration_report/test-report/cucumber_gov.xml integration_report_final/ || echo ""
            cp integration_report/test-report/cucumber_ams.xml integration_report_final/ || echo ""

            ls integration_report/test-report/
            # kubectl cp paymenthub/`kubectl get pods -n paymenthub | grep g2p-sandbox-test-gov |cut -d " " -f1`:/ph-ee-connector-integration-test/build integration_report/test-report
            for i in $(kubectl get pods -n paymenthub |cut -d " " -f1|tail -n +2); do
                echo "--------------------------------------------------------------------Logs of $i Start---------------------------------------------------------------------------" >> all_pod_logs.log
                kubectl logs -n paymenthub  $i  --all-containers=true >> all_pod_logs.log
                echo "---------------------------------------------------------------------Logs of $i End----------------------------------------------------------------------------" >> all_pod_logs.log
                echo " " >> all_pod_logs.log
                echo " " >> all_pod_logs.log
            done
            mv all_pod_logs.log integration_report/test-report/reports/tests/

      - store_test_results:
          path: integration_report_final/
      - store_artifacts:
          path: integration_report/test-report/reports/tests

  build_and_push_ams_pesa_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image for ph-ee-vouchers
          command: |
            IMAGE_TAG=$CIRCLE_TAG
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-ams-pesa/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi
            cd ph-ee-connector-ams-pesa
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-ams-pesa:$IMAGE_TAG" .
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-ams-pesa:$IMAGE_TAG"

  build_and_push_ams_pesa_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build Docker image for ph-ee-connector-ams-pesa
          command: |
            if [ "$BUILD_AMS_PESA" = "true" ]; then
              cd ph-ee-connector-ams-pesa
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-ams-pesa:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-ams-pesa:latest fynarfin/ph-ee-connector-ams-pesa:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-ams-pesa."
            fi
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_AMS_PESA" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-ams-pesa."
            fi
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_AMS_PESA" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-ams-pesa:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-ams-pesa:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-ams-pesa."
            fi
  check_for_changes_ams_pesa:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in AMS Pesa
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_AMS_PESA=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-ams-pesa directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-ams-pesa; then
                echo "No changes in ph-ee-connector-ams-pesa, skipping build."
                echo "export BUILD_AMS_PESA=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-ams-pesa, proceeding with build."
                echo "export BUILD_AMS_PESA=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  check_for_changes_bill_pay:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Bill Pay
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_BILLPAY=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-bill-pay directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-bill-pay; then
                echo "No changes in ph-ee-bill-pay, skipping build."
                echo "export BUILD_BILLPAY=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-bill-pay, proceeding with build."
                echo "export BUILD_BILLPAY=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  check_for_changes_ams_mifos:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in AMS Mifos
          command: |
            # Fetch the latest changes
            git fetch origin
  
            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_AMS_MIFOS=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")
  
              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)
  
              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"
  
              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)
  
              # Check if there are any changes in the ph-ee-connector-ams-mifos directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-ams-mifos; then
                echo "No changes in ph-ee-connector-ams-mifos, skipping build."
                echo "export BUILD_AMS_MIFOS=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-ams-mifos, proceeding with build."
                echo "export BUILD_AMS_MIFOS=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  check_for_changes_gsma_mm:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in GMSA MM
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_GSMA=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-gsma-mm directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-gsma-mm; then
                echo "No changes in ph-ee-connector-gsma-mm, skipping build."
                echo "export BUILD_GSMA=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-gsma-mm, proceeding with build."
                echo "export BUILD_GSMA=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_gsma_mm_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-gsma/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-gsma-mm
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-gsma:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-gsma:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_gsma_mm_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_GSMA" = "true" ]; then
              cd ph-ee-connector-gsma-mm
              ./gradlew checkstyleMain
              ./gradlew checkstyleTest
              ./gradlew clean bootJar
              docker build -t fynarfin/ph-ee-connector-gsma:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-gsma:latest fynarfin/ph-ee-connector-gsma:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-gsma-mm."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_GSMA" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-gsma-mm."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_GSMA" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-gsma:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-gsma:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-gsma-mm."
            fi
  check_for_changes_connector:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Connector Bulk
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_CONNECTOR=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-bulk directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-bulk; then
                echo "No changes in ph-ee-connector-bulk, skipping build."
                echo "export BUILD_CONNECTOR=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-bulk, proceeding with build."
                echo "export BUILD_CONNECTOR=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_connector_bulk_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-bulk/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-bulk
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-bulk:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-bulk:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_connector_bulk_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_CONNECTOR" = "true" ]; then
              cd ph-ee-connector-bulk
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-bulk:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-bulk:latest fynarfin/ph-ee-connector-bulk:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-bulk."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_CONNECTOR" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-bulk."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_CONNECTOR" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-bulk:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-bulk:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-bulk."
            fi
  build_and_push_mojaloop_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-mojaloop/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-mojaloop-java
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-mojaloop:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-mojaloop:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter
  check_for_changes_mojaloop:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Mojaloop Connector
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_MOJALOOP=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-mojaloop-java directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-mojaloop-java; then
                echo "No changes in ph-ee-connector-mojaloop-java, skipping build."
                echo "export BUILD_MOJALOOP=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-mojaloop-java, proceeding with build."
                echo "export BUILD_MOJALOOP=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_mojaloop_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_MOJALOOP" = "true" ]; then
              cd ph-ee-connector-mojaloop-java
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-mojaloop:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-mojaloop:latest fynarfin/ph-ee-connector-mojaloop:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-mojaloop-java."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_MOJALOOP" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-mojaloop-java."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_MOJALOOP" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-mojaloop:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-mojaloop:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-mojaloop-java."
            fi
  check_for_changes_crm:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in CRM Connector
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_CRM=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-mtn directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-mtn; then
                echo "No changes in ph-ee-connector-mtn, skipping build."
                echo "export BUILD_CRM=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-crm, proceeding with build."
                echo "export BUILD_CRM=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_crm_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-crm/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-crm
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-crm:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-crm:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_crm_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_CRM" = "true" ]; then
              cd ph-ee-connector-crm
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-crm:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-crm:latest fynarfin/ph-ee-connector-crm:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-crm."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_CRM" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-crm."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_CRM" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-crm:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-crm:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-crm."
            fi
  build_and_push_bill_pay_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker Tag Image
          command: |
            IMAGE_TAG=$CIRCLE_TAG
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-bill-pay/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi
            cd ph-ee-bill-pay
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-bill-pay:$IMAGE_TAG" .
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-bill-pay:$IMAGE_TAG"

  build_and_push_bill_pay_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_BILLPAY"="true" ]; then
              cd ph-ee-bill-pay
              ./gradlew checkstyleMain
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-bill-pay:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY"; fi
                docker image tag fynarfin/ph-ee-bill-pay:latest fynarfin/ph-ee-bill-pay:$JIRA_STORY
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-bill-pay."
            fi
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_BILLPAY"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-bill-pay."
            fi
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_BILLPAY"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-bill-pay:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-bill-pay:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-bill-pay."
            fi

  build_and_push_ams_mifos_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-ams-mifos/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-ams-mifos
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-ams-mifos:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-ams-mifos:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter


  build_and_push_ams_mifos_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_AMS_MIFOS" = "true" ]; then
              cd ph-ee-connector-ams-mifos
              ./gradlew checkstyleMain
              ./gradlew clean bootJar
              docker build -t fynarfin/ph-ee-connector-ams-mifos:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY"; fi
                docker image tag fynarfin/ph-ee-connector-ams-mifos:latest fynarfin/ph-ee-connector-ams-mifos:$JIRA_STORY
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-ams-mifos."
            fi
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_AMS_MIFOS" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-ams-mifos."
            fi
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_AMS_MIFOS" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-ams-mifos:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-ams-mifos:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-ams-mifos."
            fi
  check_for_changes_zeebe_ops:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Zeebe Ops
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_ZEEBE_OPS=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-zeebe-ops directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-zeebe-ops; then
                echo "No changes in ph-ee-zeebe-ops, skipping build."
                echo "export BUILD_ZEEBE_OPS=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-zeebe-ops, proceeding with build."
                echo "export BUILD_ZEEBE_OPS=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_zeebe_ops_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-zeebe-ops/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-zeebe-ops
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-zeebe-ops:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-zeebe-ops:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_zeebe_ops_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.24

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_ZEEBE_OPS" = "true" ]; then
              cd ph-ee-zeebe-ops
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-zeebe-ops:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-zeebe-ops:latest fynarfin/ph-ee-zeebe-ops:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-zeebe-ops."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_ZEEBE_OPS" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-zeebe-ops."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_ZEEBE_OPS" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-zeebe-ops:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-zeebe-ops:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-zeebe-ops."
            fi
  check_for_changes_mtn:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in MTN Connector
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_MTN=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-mtn directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-mtn; then
                echo "No changes in ph-ee-connector-mtn, skipping build."
                echo "export BUILD_MTN=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-mtn, proceeding with build."
                echo "export BUILD_MTN=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_mtn_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-mtn/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-mtn
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-mtn:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-mtn:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_mtn_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_MTN" = "true" ]; then
              cd ph-ee-connector-mtn
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-mtn:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-mtn:latest fynarfin/ph-ee-connector-mtn:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-mtn."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_MTN" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-mtn."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_MTN" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-mtn:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-mtn:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-mtn."
            fi
  check_for_changes_airtel:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Airtel Connector
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_AIRTEL=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-airtel directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-airtel; then
                echo "No changes in ph-ee-connector-airtel, skipping build."
                echo "export BUILD_AIRTEL=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-airtel, proceeding with build."
                echo "export BUILD_AIRTEL=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_airtel_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-airtel/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-airtel
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-airtel:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-airtel:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_airtel_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_AIRTEL" = "true" ]; then
              cd ph-ee-connector-airtel
              ./gradlew checkstyleMain
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-airtel:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-airtel:latest fynarfin/ph-ee-connector-airtel:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-airtel."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_AIRTEL" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-airtel."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_AIRTEL" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-airtel:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-airtel:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-airtel."
            fi
  check_for_changes_mpesa:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in MPesa
          command: |
            # Fetch the latest changes
            git fetch origin
  
            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_MPESA=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")
  
              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)
  
              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"
  
              # Switch to the base branch and pull the latest changes
              git checkout "$PR_BASE_BRANCH"
              git pull origin "$PR_BASE_BRANCH"
  
              # Checkout back to the branch under test
              git checkout -
  
              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)
  
              # Check if there are any changes in the ph-ee-connector-mpesa directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-mpesa; then
                echo "No changes in ph-ee-connector-mpesa, skipping build."
                echo "export BUILD_MPESA=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-mpesa, proceeding with build."
                echo "export BUILD_MPESA=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_mpesa_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-mpesa/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-mpesa
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-mpesa:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-mpesa:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_mpesa_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_MPESA" = "true" ]; then
              cd ph-ee-connector-mpesa
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-mpesa:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-mpesa:latest fynarfin/ph-ee-connector-mpesa:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-mpesa."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_MPESA" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-mpesa."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_MPESA" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-mpesa:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-mpesa:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-mpesa."
            fi
  check_for_changes_paygops:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in AMS Paygops
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_PAYGOPS=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-ams-paygops directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-ams-paygops; then
                echo "No changes in ph-ee-connector-ams-paygops, skipping build."
                echo "export BUILD_PAYGOPS=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-ams-paygops, proceeding with build."
                echo "export BUILD_PAYGOPS=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_ams_paygops_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-ams-paygops/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-ams-paygops
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-ams-paygops:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-ams-paygops:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_ams_paygops_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_PAYGOPS" = "true" ]; then
              cd ph-ee-connector-ams-paygops
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-ams-paygops:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-ams-paygops:latest fynarfin/ph-ee-connector-ams-paygops:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-ams-paygops."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_PAYGOPS" = "true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-ams-paygops."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_PAYGOPS" = "true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-ams-paygops:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-ams-paygops:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-ams-paygops."
            fi
  
  

  deploy:
    executor: docker-executor
    steps:
      - run:
          name: Deploy to environment
          command: |
            echo "Deploying to environment..."
            # Add your deployment scripts/commands here
            echo "Deployment completed."



workflows:
  version: 2
  build-and-deploy:
    jobs:
      - check_for_changes_bill_pay
      - check_for_changes_ams_mifos
      - check_for_changes_mojaloop
      - check_for_changes_paygops
      - check_for_changes_mpesa
      - check_for_changes_airtel
      - check_for_changes_mtn
      - check_for_changes_zeebe_ops
      - check_for_changes_crm
      - check_for_changes_connector
      - check_for_changes_gsma_mm
      - check_for_changes_ams_pesa
      - build_and_push_ams_pesa_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_ams_pesa_latest_image:
          requires:
            - check_for_changes_ams_pesa
          context:
            - DOCKER
      - build_and_push_mpesa_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_mpesa_latest_image:
          requires:
            - check_for_changes_mpesa
          context:
            - DOCKER
      - build_and_push_ams_paygops_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_ams_paygops_latest_image:
          requires:
            - check_for_changes_paygops
          context:
            - DOCKER
      - build_and_push_airtel_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_airtel_latest_image:
          requires:
            - check_for_changes_airtel
          context:
            - DOCKER
      - build_and_push_mtn_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_mtn_latest_image:
          requires:
            - check_for_changes_mtn
          context:
            - DOCKER
      - build_and_push_zeebe_ops_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_zeebe_ops_latest_image:
          requires:
            - check_for_changes_zeebe_ops
          context:
            - DOCKER
      - build_and_push_ams_mifos_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_ams_mifos_latest_image:
          requires:
            - check_for_changes_ams_mifos
          context:
            - DOCKER
      - build_and_push_bill_pay_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_bill_pay_latest_image:
          requires:
            - check_for_changes_bill_pay
          context:
            - DOCKER
      - build_and_push_crm_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_crm_latest_image:
          requires:
            - check_for_changes_crm
          context:
            - DOCKER
      - build_and_push_mojaloop_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_mojaloop_latest_image:
          requires:
            - check_for_changes_mojaloop
          context:
            - DOCKER
      - build_and_push_connector_bulk_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_connector_bulk_latest_image:
          requires:
            - check_for_changes_connector
          context:
            - DOCKER
      - build_and_push_gsma_mm_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_gsma_mm_latest_image:
          requires:
            - check_for_changes_gsma_mm
          context:
            - DOCKER

