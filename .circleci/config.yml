version: 2.1
orbs:
  slack: circleci/slack@4.12.5
  helm: circleci/helm@2.0.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  fynarfin-orb: fynarfin/docker-image-availability-check-and-upgrade@1.0.2

executors:
  docker-executor:
    docker:
      - image: circleci/openjdk:17-buster-node-browsers-legacy
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

jobs:
  build_and_push_ams_pesa_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image for ph-ee-vouchers
          command: |
            IMAGE_TAG=$CIRCLE_TAG
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-ams-pesa/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi
            cd ph-ee-connector-ams-pesa
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-ams-pesa:$IMAGE_TAG" .
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-ams-pesa:$IMAGE_TAG"

  build_and_push_ams_pesa_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build Docker image for ph-ee-connector-ams-pesa
          command: |
            if [ "$BUILD_AMS_PESA"="true" ]; then
              cd ph-ee-connector-ams-pesa
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-ams-pesa:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-ams-pesa:latest fynarfin/ph-ee-connector-ams-pesa:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-ams-pesa."
            fi
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_AMS_PESA"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-ams-pesa."
            fi
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_AMS_PESA"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-ams-pesa:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-ams-pesa:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-ams-pesa."
            fi
  check_for_changes_ams_pesa:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in AMS Pesa
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_AMS_PESA=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-ams-pesa directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-ams-pesa; then
                echo "No changes in ph-ee-connector-ams-pesa, skipping build."
                echo "export BUILD_AMS_PESA=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-ams-pesa, proceeding with build."
                echo "export BUILD_AMS_PESA=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  check_for_changes_bill_pay:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Bill Pay
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_BILLPAY=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-bill-pay directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-bill-pay; then
                echo "No changes in ph-ee-bill-pay, skipping build."
                echo "export BUILD_BILLPAY=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-bill-pay, proceeding with build."
                echo "export BUILD_BILLPAY=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  check_for_changes_ams_mifos:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in AMS Mifos
          command: |
            # Fetch the latest changes
            git fetch origin
  
            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_AMS_MIFOS=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")
  
              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)
  
              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"
  
              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)
  
              # Check if there are any changes in the ph-ee-connector-ams-mifos directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-ams-mifos; then
                echo "No changes in ph-ee-connector-ams-mifos, skipping build."
                echo "export BUILD_AMS_MIFOS=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-ams-mifos, proceeding with build."
                echo "export BUILD_AMS_MIFOS=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  check_for_changes_gsma_mm:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in GMSA MM
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_GSMA=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-gsma-mm directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-gsma-mm; then
                echo "No changes in ph-ee-connector-gsma-mm, skipping build."
                echo "export BUILD_GSMA=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-gsma-mm, proceeding with build."
                echo "export BUILD_GSMA=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_gsma_mm_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-gsma/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-gsma-mm
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-gsma:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-gsma:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_gsma_mm_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_GSMA"="true" ]; then
              cd ph-ee-connector-gsma-mm
              ./gradlew checkstyleMain
              ./gradlew checkstyleTest
              ./gradlew clean bootJar
              docker build -t fynarfin/ph-ee-connector-gsma:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-gsma:latest fynarfin/ph-ee-connector-gsma:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-gsma-mm."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_GSMA"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-gsma-mm."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_GSMA"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-gsma:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-gsma:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-gsma-mm."
            fi
  check_for_changes_connector:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Connector Bulk
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_CONNECTOR=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-bulk directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-bulk; then
                echo "No changes in ph-ee-connector-bulk, skipping build."
                echo "export BUILD_CONNECTOR=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-bulk, proceeding with build."
                echo "export BUILD_CONNECTOR=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_connector_bulk_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-bulk/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-bulk
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-bulk:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-bulk:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_connector_bulk_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_CONNECTOR"="true" ]; then
              cd ph-ee-connector-bulk
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-bulk:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-bulk:latest fynarfin/ph-ee-connector-bulk:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-bulk."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_CONNECTOR"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-bulk."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_CONNECTOR"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-bulk:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-bulk:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-bulk."
            fi
  build_and_push_mojaloop_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-mojaloop/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-mojaloop-java
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-mojaloop:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-mojaloop:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter
  check_for_changes_mojaloop:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Mojaloop Connector
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_MOJALOOP=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-mojaloop-java directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-mojaloop-java; then
                echo "No changes in ph-ee-connector-mojaloop-java, skipping build."
                echo "export BUILD_MOJALOOP=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-mojaloop-java, proceeding with build."
                echo "export BUILD_MOJALOOP=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_mojaloop_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_MOJALOOP"="true" ]; then
              cd ph-ee-connector-mojaloop-java
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-mojaloop:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-mojaloop:latest fynarfin/ph-ee-connector-mojaloop:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-mojaloop-java."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_MOJALOOP"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-mojaloop-java."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_MOJALOOP"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-mojaloop:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-mojaloop:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-mojaloop-java."
            fi
  check_for_changes_crm:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in CRM Connector
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_CRM=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-mtn directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-mtn; then
                echo "No changes in ph-ee-connector-mtn, skipping build."
                echo "export BUILD_CRM=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-crm, proceeding with build."
                echo "export BUILD_CRM=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_crm_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-crm/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-crm
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-crm:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-crm:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_crm_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_CRM"="true" ]; then
              cd ph-ee-connector-crm
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-crm:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-crm:latest fynarfin/ph-ee-connector-crm:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-crm."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_CRM"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-crm."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_CRM"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-crm:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-crm:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-crm."
            fi
  build_and_push_bill_pay_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker Tag Image
          command: |
            IMAGE_TAG=$CIRCLE_TAG
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-bill-pay/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi
            cd ph-ee-bill-pay
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-bill-pay:$IMAGE_TAG" .
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-bill-pay:$IMAGE_TAG"

  build_and_push_bill_pay_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_BILLPAY"="true" ]; then
              cd ph-ee-bill-pay
              ./gradlew checkstyleMain
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-bill-pay:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY"; fi
                docker image tag fynarfin/ph-ee-bill-pay:latest fynarfin/ph-ee-bill-pay:$JIRA_STORY
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-bill-pay."
            fi
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_BILLPAY"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-bill-pay."
            fi
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_BILLPAY"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-bill-pay:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-bill-pay:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-bill-pay."
            fi

  build_and_push_ams_mifos_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-ams-mifos/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-ams-mifos
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-ams-mifos:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-ams-mifos:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter


  build_and_push_ams_mifos_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_AMS_MIFOS"="true" ]; then
              cd ph-ee-connector-ams-mifos
              ./gradlew checkstyleMain
              ./gradlew clean bootJar
              docker build -t fynarfin/ph-ee-connector-ams-mifos:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then echo "Invalid PR title" && exit 1; else echo "Ticket NO: $JIRA_STORY"; fi
                docker image tag fynarfin/ph-ee-connector-ams-mifos:latest fynarfin/ph-ee-connector-ams-mifos:$JIRA_STORY
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-ams-mifos."
            fi
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_AMS_MIFOS"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-ams-mifos."
            fi
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_AMS_MIFOS"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-ams-mifos:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-ams-mifos:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-ams-mifos."
            fi
  check_for_changes_zeebe_ops:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Zeebe Ops
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_ZEEBE_OPS=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-zeebe-ops directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-zeebe-ops; then
                echo "No changes in ph-ee-zeebe-ops, skipping build."
                echo "export BUILD_ZEEBE_OPS=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-zeebe-ops, proceeding with build."
                echo "export BUILD_ZEEBE_OPS=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_zeebe_ops_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-zeebe-ops/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-zeebe-ops
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-zeebe-ops:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-zeebe-ops:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_zeebe_ops_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.24

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_ZEEBE_OPS"="true" ]; then
              cd ph-ee-zeebe-ops
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-zeebe-ops:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-zeebe-ops:latest fynarfin/ph-ee-zeebe-ops:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-zeebe-ops."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_ZEEBE_OPS"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-zeebe-ops."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_ZEEBE_OPS"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-zeebe-ops:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-zeebe-ops:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-zeebe-ops."
            fi
  check_for_changes_mtn:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in MTN Connector
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_MTN=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-mtn directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-mtn; then
                echo "No changes in ph-ee-connector-mtn, skipping build."
                echo "export BUILD_MTN=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-mtn, proceeding with build."
                echo "export BUILD_MTN=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_mtn_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-mtn/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-mtn
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-mtn:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-mtn:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_mtn_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_MTN"="true" ]; then
              cd ph-ee-connector-mtn
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-mtn:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-mtn:latest fynarfin/ph-ee-connector-mtn:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-mtn."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_MTN"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-mtn."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_MTN"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-mtn:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-mtn:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-mtn."
            fi
  check_for_changes_airtel:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in Airtel Connector
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_AIRTEL=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-airtel directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-airtel; then
                echo "No changes in ph-ee-connector-airtel, skipping build."
                echo "export BUILD_AIRTEL=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-airtel, proceeding with build."
                echo "export BUILD_AIRTEL=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_airtel_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-airtel/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-airtel
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-airtel:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-airtel:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_airtel_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_AIRTEL"="true" ]; then
              cd ph-ee-connector-airtel
              ./gradlew checkstyleMain
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-airtel:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-airtel:latest fynarfin/ph-ee-connector-airtel:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-airtel."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_AIRTEL"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-airtel."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_AIRTEL"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-airtel:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-airtel:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-airtel."
            fi
  check_for_changes_mpesa:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in MPesa
          command: |
            # Fetch the latest changes
            git fetch origin
  
            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_MPESA=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")
  
              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)
  
              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"
  
              # Switch to the base branch and pull the latest changes
              git checkout "$PR_BASE_BRANCH"
              git pull origin "$PR_BASE_BRANCH"
  
              # Checkout back to the branch under test
              git checkout -
  
              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)
  
              # Check if there are any changes in the ph-ee-connector-mpesa directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-mpesa; then
                echo "No changes in ph-ee-connector-mpesa, skipping build."
                echo "export BUILD_MPESA=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-mpesa, proceeding with build."
                echo "export BUILD_MPESA=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_mpesa_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-mpesa/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-mpesa
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-mpesa:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-mpesa:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_mpesa_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_MPESA"="true" ]; then
              cd ph-ee-connector-mpesa
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-mpesa:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-mpesa:latest fynarfin/ph-ee-connector-mpesa:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-mpesa."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_MPESA"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-mpesa."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_MPESA"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-mpesa:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-mpesa:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-mpesa."
            fi
  check_for_changes_paygops:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Check for changes in AMS Paygops
          command: |
            # Fetch the latest changes
            git fetch origin

            # Determine the base branch for the PR
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a pull request, skipping check."
              echo "export BUILD_PAYGOPS=false" >> $BASH_ENV
            else
              # Extract the PR number from the pull request URL
              PR_NUMBER=$(basename "$CIRCLE_PULL_REQUEST")

              # Fetch the base branch for the PR using the GitHub API
              PR_BASE_BRANCH=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

              # Ensure we have the latest changes from the base branch
              git fetch origin "$PR_BASE_BRANCH"

              # Find the common ancestor (merge-base) between the base branch and the current branch
              MERGE_BASE=$(git merge-base origin/$PR_BASE_BRANCH HEAD)

              # Check if there are any changes in the ph-ee-connector-ams-paygops directory since the common ancestor
              if git diff --quiet $MERGE_BASE HEAD -- ph-ee-connector-ams-paygops; then
                echo "No changes in ph-ee-connector-ams-paygops, skipping build."
                echo "export BUILD_PAYGOPS=false" >> $BASH_ENV
              else
                echo "Changes detected in ph-ee-connector-ams-paygops, proceeding with build."
                echo "export BUILD_PAYGOPS=true" >> $BASH_ENV
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_and_push_ams_paygops_tag_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb
      GITHUB_TOKEN: ${GITHUB_TOKEN}  # Add the GitHub token as an environment variable

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and Push Docker tag Image
          command: |
            # Set environment variables
            IMAGE_TAG=$CIRCLE_TAG

            # Check if the Docker image with the same tag already exists in Docker Hub
            if curl -s -f -u "$DOCKERHUB_USERNAME":"$DOCKERHUB_PASSWORD" "https://hub.docker.com/v2/repositories/fynarfin/ph-ee-connector-ams-paygops/tags/$IMAGE_TAG" > /dev/null; then
              echo "Skipping the build and push as the tag $IMAGE_TAG already exists in Docker Hub."
              exit 0
            fi

            # Build and tag the Docker image
            cd ph-ee-connector-ams-paygops
            ./gradlew bootJar
            docker build -t "fynarfin/ph-ee-connector-ams-paygops:$IMAGE_TAG" .

            # Push the Docker image to Docker Hub
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push "fynarfin/ph-ee-connector-ams-paygops:$IMAGE_TAG"

          # when: always  # The job will be executed even if there's no match for the tag filter

  build_and_push_ams_paygops_latest_image:
    executor: docker-executor
    environment:
      JVM_OPTS: -Xmx512m
      TERM: dumb

    steps:
      - checkout
      # Install Docker to build and push the image
      - setup_remote_docker:
          version: 20.10.14

      # Build the Docker image
      - run:
          name: Build Docker image
          command: |
            if [ "$BUILD_PAYGOPS"="true" ]; then
              cd ph-ee-connector-ams-paygops
              ./gradlew bootJar
              docker build -t fynarfin/ph-ee-connector-ams-paygops:latest .
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                if [ -z "$JIRA_STORY" ]; then
                  echo "Invalid PR title" && exit 1
                else
                  echo "Ticket NO: $JIRA_STORY"
                  docker image tag fynarfin/ph-ee-connector-ams-paygops:latest fynarfin/ph-ee-connector-ams-paygops:$JIRA_STORY
                fi
              fi
            else
              echo "Skipping build as there are no changes in ph-ee-connector-ams-paygops."
            fi

      # Log in to DockerHub using environment variables
      - run:
          name: Login to DockerHub
          command: |
            if [ "$BUILD_PAYGOPS"="true" ]; then
              echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            else
              echo "Skipping DockerHub login as there are no changes in ph-ee-connector-ams-paygops."
            fi

      # Push the Docker image to DockerHub
      - run:
          name: Push Docker image to DockerHub
          command: |
            if [ "$BUILD_PAYGOPS"="true" ]; then
              if [ "$CIRCLE_BRANCH" = "develop" ]; then
                docker push fynarfin/ph-ee-connector-ams-paygops:latest
              fi
              if [ "$CIRCLE_BRANCH" != "develop" ]; then
                PR_NUMBER=$(basename $CIRCLE_PULL_REQUEST)
                PR_TITLE=$(curl -sSL "https://api.github.com/repos/fynarfin/$CIRCLE_PR_REPONAME/pulls/$PR_NUMBER" | jq -r '.title')
                JIRA_STORY=$(echo $PR_TITLE | cut -d "[" -f2 | cut -d "]" -f1 | tr '[A-Z]' '[a-z]')
                docker push fynarfin/ph-ee-connector-ams-paygops:${JIRA_STORY}
              fi
            else
              echo "Skipping push as there are no changes in ph-ee-connector-ams-paygops."
            fi
  
  

  deploy:
    executor: docker-executor
    steps:
      - run:
          name: Deploy to environment
          command: |
            echo "Deploying to environment..."
            # Add your deployment scripts/commands here
            echo "Deployment completed."



workflows:
  version: 2
  build-and-deploy:
    jobs:
      - check_for_changes_bill_pay
      - check_for_changes_ams_mifos
      - check_for_changes_mojaloop
      - check_for_changes_paygops
      - check_for_changes_mpesa
      - check_for_changes_airtel
      - check_for_changes_mtn
      - check_for_changes_zeebe_ops
      - check_for_changes_crm
      - check_for_changes_connector
      - check_for_changes_gsma_mm
      - check_for_changes_ams_pesa
      - build_and_push_ams_pesa_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_ams_pesa_latest_image:
          requires:
            - check_for_changes_ams_pesa
          context:
            - DOCKER
      - build_and_push_mpesa_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_mpesa_latest_image:
          requires:
            - check_for_changes_mpesa
          context:
            - DOCKER
      - build_and_push_ams_paygops_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_ams_paygops_latest_image:
          requires:
            - check_for_changes_paygops
          context:
            - DOCKER
      - build_and_push_airtel_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_airtel_latest_image:
          requires:
            - check_for_changes_airtel
          context:
            - DOCKER
      - build_and_push_mtn_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_mtn_latest_image:
          requires:
            - check_for_changes_mtn
          context:
            - DOCKER
      - build_and_push_zeebe_ops_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_zeebe_ops_latest_image:
          requires:
            - check_for_changes_zeebe_ops
          context:
            - DOCKER
      - build_and_push_ams_mifos_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_ams_mifos_latest_image:
          requires:
            - check_for_changes_ams_mifos
          context:
            - DOCKER
      - build_and_push_bill_pay_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_bill_pay_latest_image:
          requires:
            - check_for_changes_bill_pay
          context:
            - DOCKER
      - build_and_push_crm_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_crm_latest_image:
          requires:
            - check_for_changes_crm
          context:
            - DOCKER
      - build_and_push_mojaloop_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_mojaloop_latest_image:
          requires:
            - check_for_changes_mojaloop
          context:
            - DOCKER
      - build_and_push_connector_bulk_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_connector_bulk_latest_image:
          requires:
            - check_for_changes_connector
          context:
            - DOCKER
      - build_and_push_gsma_mm_tag_image:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/  # Match tags in the format v1.2.3
          context:
            - DOCKER
      - build_and_push_gsma_mm_latest_image:
          requires:
            - check_for_changes_gsma_mm
          context:
            - DOCKER

